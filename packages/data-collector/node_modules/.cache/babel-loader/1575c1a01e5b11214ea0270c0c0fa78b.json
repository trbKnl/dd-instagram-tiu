{"ast":null,"code":"import { z } from \"zod\";\n\n// In order to work towards making visualizations a plugin, we postpone type checking\n// until the visualization is actually used. We use zod to define every type, so that\n// we can parse the visualizations argument in PropsUIPromptConsentFormTable.\n\n// Matching types from Feldspar\n// We can either import these from Feldspare, or keep visualization plugin separate b\n// duplicating the types here. Currently opting for duplication to avoid complexity\n// (and if input format changes, the plugin would break regardless)\n\nexport const zTranslatable = z.record(z.string());\nexport const zLabel = z.union([zTranslatable, z.string()]);\n// Table type, but only taking what we need\nexport const zTable = z.object({\n  id: z.string(),\n  head: z.object({\n    cells: z.array(z.string())\n  }),\n  body: z.object({\n    rows: z.array(z.object({\n      id: z.string(),\n      cells: z.array(z.string())\n    }))\n  })\n});\n// Visualization Types\n\nexport const zVisualizationProps = z.object({\n  title: zTranslatable,\n  height: z.number().optional()\n});\nexport const zAggregationFunction = z.enum([\"count\", \"mean\", \"sum\", \"count_pct\", \"pct\"]);\nexport const zDateFormat = z.enum([\"auto\", \"year\", \"quarter\", \"month\", \"day\", \"hour\", \"month_cycle\", \"weekday_cycle\", \"hour_cycle\"]);\nexport const zChartVisualizationType = z.enum([\"line\", \"bar\", \"area\"]);\nexport const zTextVisualizationType = z.enum([\"wordcloud\"]);\n// Chart Visualizations\n\n// External types (need schema)\nexport const zAxis = z.object({\n  label: zLabel.optional(),\n  column: z.string()\n});\nexport const zAggregationGroup = z.object({\n  label: zLabel.optional(),\n  column: z.string(),\n  dateFormat: zDateFormat.optional(),\n  range: z.array(z.number()).optional(),\n  levels: z.array(z.string()).optional()\n});\nexport const zAggregationValue = z.object({\n  label: zLabel.optional(),\n  column: z.string().optional().default(\".COUNT\"),\n  aggregate: zAggregationFunction.optional(),\n  group_by: z.string().optional(),\n  z: z.string().optional(),\n  zAggregate: zAggregationFunction.optional(),\n  addZeroes: z.boolean().optional()\n});\nexport const zChartVisualization = zVisualizationProps.merge(z.object({\n  type: zChartVisualizationType,\n  group: zAggregationGroup,\n  values: z.array(zAggregationValue)\n}));\n\n// Internal types\n\n// Text Visualizations\n\n// External types (need schema)\n\nexport const zTextVisualization = zVisualizationProps.merge(z.object({\n  type: zTextVisualizationType,\n  textColumn: z.string(),\n  valueColumn: z.string().optional(),\n  tokenize: z.boolean().optional(),\n  extract: z.enum([\"url_domain\"]).optional()\n}));\n\n// Internal types\n\n// Visualization Type union\n\nexport const zVisualizationType = z.union([zChartVisualization, zTextVisualization]);","map":{"version":3,"names":["z","zTranslatable","record","string","zLabel","union","zTable","object","id","head","cells","array","body","rows","zVisualizationProps","title","height","number","optional","zAggregationFunction","enum","zDateFormat","zChartVisualizationType","zTextVisualizationType","zAxis","label","column","zAggregationGroup","dateFormat","range","levels","zAggregationValue","default","aggregate","group_by","zAggregate","addZeroes","boolean","zChartVisualization","merge","type","group","values","zTextVisualization","textColumn","valueColumn","tokenize","extract","zVisualizationType"],"sources":["/home/turbo/d3i/projects/tim_reeskens/dd-instagram-tiu/packages/data-collector/src/components/consent_form_viz/visualization_plugin/types.ts"],"sourcesContent":["import { z } from \"zod\"\n\n// In order to work towards making visualizations a plugin, we postpone type checking\n// until the visualization is actually used. We use zod to define every type, so that\n// we can parse the visualizations argument in PropsUIPromptConsentFormTable.\n\n// Matching types from Feldspar\n// We can either import these from Feldspare, or keep visualization plugin separate b\n// duplicating the types here. Currently opting for duplication to avoid complexity\n// (and if input format changes, the plugin would break regardless)\n\nexport const zTranslatable = z.record(z.string())\nexport type Translatable = z.infer<typeof zTranslatable>\n\nexport const zLabel = z.union([zTranslatable, z.string()])\nexport type Label = z.infer<typeof zLabel>\n\n// Table type, but only taking what we need\nexport const zTable = z.object({\n  id: z.string(),\n  head: z.object({ cells: z.array(z.string()) }),\n  body: z.object({ rows: z.array(z.object({ id: z.string(), cells: z.array(z.string()) })) }),\n})\nexport type Table = z.infer<typeof zTable>\n\n// Visualization Types\n\nexport const zVisualizationProps = z.object({\n  title: zTranslatable,\n  height: z.number().optional(),\n})\nexport type VisualizationProps = z.infer<typeof zVisualizationProps>\n\nexport const zAggregationFunction = z.enum([\"count\", \"mean\", \"sum\", \"count_pct\", \"pct\"])\nexport type AggregationFunction = z.infer<typeof zAggregationFunction>\n\nexport const zDateFormat = z.enum([\n  \"auto\",\n  \"year\",\n  \"quarter\",\n  \"month\",\n  \"day\",\n  \"hour\",\n  \"month_cycle\",\n  \"weekday_cycle\",\n  \"hour_cycle\",\n])\nexport type DateFormat = z.infer<typeof zDateFormat>\n\nexport const zChartVisualizationType = z.enum([\"line\", \"bar\", \"area\"])\nexport type ChartVisualizationType = z.infer<typeof zChartVisualizationType>\n\nexport const zTextVisualizationType = z.enum([\"wordcloud\"])\nexport type TextVisualizationType = z.infer<typeof zTextVisualizationType>\n\n// Chart Visualizations\n\n// External types (need schema)\nexport const zAxis = z.object({\n  label: zLabel.optional(),\n  column: z.string(),\n})\nexport type Axis = z.infer<typeof zAxis>\n\nexport const zAggregationGroup = z.object({\n  label: zLabel.optional(),\n  column: z.string(),\n  dateFormat: zDateFormat.optional(),\n  range: z.array(z.number()).optional(),\n  levels: z.array(z.string()).optional(),\n})\nexport type AggregationGroup = z.infer<typeof zAggregationGroup>\n\nexport const zAggregationValue = z.object({\n  label: zLabel.optional(),\n  column: z.string().optional().default(\".COUNT\"),\n  aggregate: zAggregationFunction.optional(),\n  group_by: z.string().optional(),\n  z: z.string().optional(),\n  zAggregate: zAggregationFunction.optional(),\n  addZeroes: z.boolean().optional(),\n})\nexport type AggregationValue = z.infer<typeof zAggregationValue>\n\nexport const zChartVisualization = zVisualizationProps.merge(\n  z.object({\n    type: zChartVisualizationType,\n    group: zAggregationGroup,\n    values: z.array(zAggregationValue),\n  })\n)\nexport type ChartVisualization = z.infer<typeof zChartVisualization>\n\n// Internal types\nexport type TickerFormat = \"percent\" | \"default\"\nexport type XType = \"string\" | \"date\"\n\nexport interface AxisSettings {\n  id: string\n  label: Translatable | string\n  tickerFormat: TickerFormat\n}\n\nexport interface ChartVisualizationData {\n  type: ChartVisualizationType\n  data: Array<Record<string, any>>\n  xKey: string\n  xLabel: string | Translatable | undefined\n  yKeys: Record<string, AxisSettings>\n}\n\n// Text Visualizations\n\n// External types (need schema)\n\nexport const zTextVisualization = zVisualizationProps.merge(\n  z.object({\n    type: zTextVisualizationType,\n    textColumn: z.string(),\n    valueColumn: z.string().optional(),\n    tokenize: z.boolean().optional(),\n    extract: z.enum([\"url_domain\"]).optional(),\n  })\n)\nexport type TextVisualization = z.infer<typeof zTextVisualization>\n\n// Internal types\n\nexport interface ScoredTerm {\n  text: string\n  value: number\n  importance: number\n  rowIds?: string[]\n}\n\nexport interface TextVisualizationData {\n  type: TextVisualizationType\n  topTerms: ScoredTerm[]\n}\n\n// Visualization Type union\n\nexport type VisualizationData = ChartVisualizationData | TextVisualizationData\n\nexport const zVisualizationType = z.union([zChartVisualization, zTextVisualization])\nexport type VisualizationType = z.infer<typeof zVisualizationType>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}