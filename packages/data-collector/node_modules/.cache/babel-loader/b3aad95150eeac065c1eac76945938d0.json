{"ast":null,"code":"import { extractUrlDomain, getTableColumn, tokenize } from './util';\nexport async function prepareTextData(table, visualization) {\n  const visualizationData = {\n    type: visualization.type,\n    topTerms: []\n  };\n  if (table.body.rows.length === 0) return visualizationData;\n  const texts = getTableColumn(table, visualization.textColumn);\n  const values = visualization.valueColumn != null ? getTableColumn(table, visualization.valueColumn) : null;\n  const vocabulary = getVocabulary(texts, values, visualization);\n  visualizationData.topTerms = getTopTerms(vocabulary, texts.length, 200);\n  return visualizationData;\n}\nfunction getVocabulary(texts, values, visualization) {\n  const vocabulary = {};\n  for (let i = 0; i < texts.length; i++) {\n    if ((texts === null || texts === void 0 ? void 0 : texts[i]) == null) continue;\n    const text = texts[i];\n    const tokens = visualization.tokenize != null && visualization.tokenize ? tokenize(text) : [text];\n    const seen = new Set();\n    for (let token of tokens) {\n      var _Number;\n      if (visualization.extract === 'url_domain') token = extractUrlDomain(token);\n      if (vocabulary[token] === undefined) vocabulary[token] = {\n        value: 0,\n        docFreq: 0\n      };\n      if (!seen.has(token)) {\n        vocabulary[token].docFreq += 1;\n        seen.add(token);\n      }\n      const v = values != null ? (_Number = Number(values[i])) !== null && _Number !== void 0 ? _Number : 1 : 1;\n      if (!isNaN(v)) vocabulary[token].value += v;\n    }\n  }\n  return vocabulary;\n}\nfunction getTopTerms(vocabulary, nDocs, topTerms) {\n  return Object.entries(vocabulary).map(([text, stats]) => {\n    const tf = stats.value;\n    const idf = Math.log(nDocs / stats.docFreq);\n    return {\n      text,\n      value: stats.value,\n      importance: tf * idf\n    };\n  }).sort((a, b) => b.importance - a.importance).slice(0, topTerms);\n}","map":{"version":3,"names":["extractUrlDomain","getTableColumn","tokenize","prepareTextData","table","visualization","visualizationData","type","topTerms","body","rows","length","texts","textColumn","values","valueColumn","vocabulary","getVocabulary","getTopTerms","i","text","tokens","seen","Set","token","_Number","extract","undefined","value","docFreq","has","add","v","Number","isNaN","nDocs","Object","entries","map","stats","tf","idf","Math","log","importance","sort","a","b","slice"],"sources":["/home/turbo/d3i/projects/tim_reeskens/dd-instagram-tiu/packages/data-collector/src/components/consent_form_viz/visualization_plugin/visualizationDataFunctions/prepareTextData.ts"],"sourcesContent":["import { extractUrlDomain, getTableColumn, tokenize } from './util'\nimport { TextVisualizationData, TextVisualization, ScoredTerm, Table } from '../types'\n\ninterface VocabularyStats {\n  value: number\n  docFreq: number\n}\n\nexport async function prepareTextData (table: Table, visualization: TextVisualization): Promise<TextVisualizationData> {\n  const visualizationData: TextVisualizationData = {\n    type: visualization.type,\n    topTerms: []\n  }\n\n  if (table.body.rows.length === 0) return visualizationData\n\n  const texts = getTableColumn(table, visualization.textColumn)\n  const values = visualization.valueColumn != null ? getTableColumn(table, visualization.valueColumn) : null\n\n  const vocabulary = getVocabulary(texts, values, visualization)\n  visualizationData.topTerms = getTopTerms(vocabulary, texts.length, 200)\n\n  return visualizationData\n}\n\nfunction getVocabulary (\n  texts: string[],\n  values: string[] | null,\n  visualization: TextVisualization\n): Record<string, VocabularyStats> {\n  const vocabulary: Record<string, VocabularyStats> = {}\n\n  for (let i = 0; i < texts.length; i++) {\n    if (texts?.[i] == null) continue\n    const text = texts[i]\n    const tokens = visualization.tokenize != null && visualization.tokenize ? tokenize(text) : [text]\n\n    const seen = new Set<string>()\n    for (let token of tokens) {\n      if (visualization.extract === 'url_domain') token = extractUrlDomain(token)\n      if (vocabulary[token] === undefined) vocabulary[token] = { value: 0, docFreq: 0 }\n      if (!seen.has(token)) {\n        vocabulary[token].docFreq += 1\n        seen.add(token)\n      }\n\n      const v = values != null ? Number(values[i]) ?? 1 : 1\n      if (!isNaN(v)) vocabulary[token].value += v\n    }\n  }\n  return vocabulary\n}\n\nfunction getTopTerms (vocabulary: Record<string, VocabularyStats>, nDocs: number, topTerms: number): ScoredTerm[] {\n  return Object.entries(vocabulary)\n    .map(([text, stats]) => {\n      const tf = stats.value\n      const idf = Math.log(nDocs / stats.docFreq)\n      return { text, value: stats.value, importance: tf * idf }\n    })\n    .sort((a, b) => b.importance - a.importance)\n    .slice(0, topTerms)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}