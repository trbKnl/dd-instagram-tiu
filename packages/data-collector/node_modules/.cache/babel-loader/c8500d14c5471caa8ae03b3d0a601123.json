{"ast":null,"code":"import { prepareChartData } from './prepareChartData';\nimport { prepareTextData } from './prepareTextData';\nself.onmessage = e => {\n  createVisualizationData(e.data.table, e.data.visualization).then(visualizationData => {\n    self.postMessage({\n      status: 'success',\n      visualizationData\n    });\n  }).catch(error => {\n    console.error(error);\n    self.postMessage({\n      status: 'error',\n      visualizationData: undefined\n    });\n  });\n};\nasync function createVisualizationData(table, visualization) {\n  if (table === undefined || visualization === undefined) throw new Error('Table and visualization are required');\n  if (['line', 'bar', 'area'].includes(visualization.type)) {\n    return await prepareChartData(table, visualization);\n  }\n  if (['wordcloud'].includes(visualization.type)) {\n    return await prepareTextData(table, visualization);\n  }\n  throw new Error(`Visualization type ${visualization.type} not supported`);\n}","map":{"version":3,"names":["prepareChartData","prepareTextData","self","onmessage","e","createVisualizationData","data","table","visualization","then","visualizationData","postMessage","status","catch","error","console","undefined","Error","includes","type"],"sources":["/home/turbo/d3i/projects/tim_reeskens/dd-instagram-tiu/packages/data-collector/src/components/consent_form_viz/visualization_plugin/visualizationDataFunctions/visualizationDataWorker.ts"],"sourcesContent":["import { ChartVisualization, TextVisualization, VisualizationType, VisualizationData, Table } from '../types'\nimport { prepareChartData } from './prepareChartData'\nimport { prepareTextData } from './prepareTextData'\n\ninterface Input {\n  table: Table\n  visualization: VisualizationType\n}\n\nself.onmessage = (e: MessageEvent<Input>) => {\n  createVisualizationData(e.data.table, e.data.visualization)\n    .then((visualizationData) => {\n      self.postMessage({ status: 'success', visualizationData })\n    })\n    .catch((error) => {\n      console.error(error)\n      self.postMessage({ status: 'error', visualizationData: undefined })\n    })\n}\n\nasync function createVisualizationData (table: Table, visualization: VisualizationType): Promise<VisualizationData> {\n  if (table === undefined || visualization === undefined) throw new Error('Table and visualization are required')\n\n  if (['line', 'bar', 'area'].includes(visualization.type)) { return await prepareChartData(table, visualization as ChartVisualization) }\n\n  if (['wordcloud'].includes(visualization.type)) { return await prepareTextData(table, visualization as TextVisualization) }\n\n  throw new Error(`Visualization type ${visualization.type} not supported`)\n}\n"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,eAAe,QAAQ,mBAAmB;AAOnDC,IAAI,CAACC,SAAS,GAAIC,CAAsB,IAAK;EAC3CC,uBAAuB,CAACD,CAAC,CAACE,IAAI,CAACC,KAAK,EAAEH,CAAC,CAACE,IAAI,CAACE,aAAa,CAAC,CACxDC,IAAI,CAAEC,iBAAiB,IAAK;IAC3BR,IAAI,CAACS,WAAW,CAAC;MAAEC,MAAM,EAAE,SAAS;MAAEF;IAAkB,CAAC,CAAC;EAC5D,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBZ,IAAI,CAACS,WAAW,CAAC;MAAEC,MAAM,EAAE,OAAO;MAAEF,iBAAiB,EAAEM;IAAU,CAAC,CAAC;EACrE,CAAC,CAAC;AACN,CAAC;AAED,eAAeX,uBAAuBA,CAAEE,KAAY,EAAEC,aAAgC,EAA8B;EAClH,IAAID,KAAK,KAAKS,SAAS,IAAIR,aAAa,KAAKQ,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EAE/G,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACV,aAAa,CAACW,IAAI,CAAC,EAAE;IAAE,OAAO,MAAMnB,gBAAgB,CAACO,KAAK,EAAEC,aAAmC,CAAC;EAAC;EAEtI,IAAI,CAAC,WAAW,CAAC,CAACU,QAAQ,CAACV,aAAa,CAACW,IAAI,CAAC,EAAE;IAAE,OAAO,MAAMlB,eAAe,CAACM,KAAK,EAAEC,aAAkC,CAAC;EAAC;EAE1H,MAAM,IAAIS,KAAK,CAAC,sBAAsBT,aAAa,CAACW,IAAI,gBAAgB,CAAC;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module"}